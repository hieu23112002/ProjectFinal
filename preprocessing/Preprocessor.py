import cv2 as cv
import numpy as np

def _sauvola(src, win=25, k=0.2, R=128):
    src = src.astype(np.float32)
    mean = cv.boxFilter(src, ddepth=-1, ksize=(win, win), normalize=True)
    sqmean = cv.boxFilter(src * src, ddepth=-1, ksize=(win, win), normalize=True)
    var = np.maximum(sqmean - mean * mean, 0)
    std = np.sqrt(var)
    thresh = mean * (1 + k * (std / R - 1))
    return ((src > thresh).astype(np.uint8) * 255)

def _remove_small_components(bin_img, min_area=25):
    num, lbl, stats, _ = cv.connectedComponentsWithStats(bin_img, connectivity=8)
    out = np.zeros_like(bin_img)
    for i in range(1, num):
        if stats[i, cv.CC_STAT_AREA] >= min_area:
            out[lbl == i] = 255
    return out

def preprocess(path):
    # --- 1Ô∏è‚É£ ƒê·ªçc v√† chuy·ªÉn x√°m ---
    bgr = cv.imread(path)
    gray = cv.cvtColor(bgr, cv.COLOR_BGR2GRAY)

    # --- 2Ô∏è‚É£ Kh·ª≠ n·ªÅn (d√πng blur m·∫°nh v√† normalize) ---
    bg = cv.medianBlur(gray, 51)
    norm = cv.normalize((gray.astype(np.float32) / (bg.astype(np.float32) + 1e-3)) * 128.0,
                        None, 0, 255, cv.NORM_MINMAX).astype(np.uint8)

    # --- 3Ô∏è‚É£ L√†m m·ªãn gi·∫£m nhi·ªÖu ---
    norm = cv.bilateralFilter(norm, d=9, sigmaColor=50, sigmaSpace=50)

    # --- 4Ô∏è‚É£ TƒÉng t∆∞∆°ng ph·∫£n c·ª•c b·ªô ---
    clahe = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    norm = clahe.apply(norm)

    # --- 5Ô∏è‚É£ Binarize (Sauvola) ---
    bin_img = _sauvola(norm, win=25, k=0.2, R=128)

    # # --- 6Ô∏è‚É£ X√≥a d√≤ng k·∫ª ngang ---
    # bin_img = _remove_horizontal_lines(bin_img, min_len_ratio=0.2, thickness=3)

    # --- 7Ô∏è‚É£ L·ªçc nhi·ªÖu nh·ªè ---
    bin_img = _remove_small_components(bin_img, min_area=50)

    # --- 8Ô∏è‚É£ L√†m m·ªãn nh·∫π ƒë·ªÉ gi·∫£m ch·∫•m nh·ªè ---
    bin_img = cv.medianBlur(bin_img, 3)

    # üü© --- 9Ô∏è‚É£ L√†m ƒë·∫≠m v√† s·∫Øc n√©t ch·ªØ ---
    # B∆∞·ªõc 1: Closing ƒë·ªÉ n·ªëi ch·ªØ, l·∫•p kho·∫£ng tr·ªëng nh·ªè
    kernel_close = cv.getStructuringElement(cv.MORPH_ELLIPSE, (2, 2))
    bin_img = cv.morphologyEx(bin_img, cv.MORPH_CLOSE, kernel_close, iterations=1)

    # B∆∞·ªõc 3: L√†m m∆∞·ª£t l·∫°i b·∫±ng Gaussian Blur nh·∫π
    bin_img = cv.GaussianBlur(bin_img, (3, 3), 0)

    return bin_img


if __name__ == "__main__":
    path_in = "../image/d943294e-57e5-4c90-91a6-647619bcf55e.jpg"
    path_out = "../image/output_clean1.jpg"
    img = preprocess(path_in)
    cv.imwrite(path_out, img)
    print("‚úÖ ·∫¢nh ƒë√£ l∆∞u:", path_out)
